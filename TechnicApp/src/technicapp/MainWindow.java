package technicapp;

import com.hp.hpl.jena.ontology.OntModel;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Klasa głównego okna programu technika.
 * @author Ciziu
 */
public class MainWindow extends javax.swing.JFrame {

    PatientStorage patientStorage;
    File examFile;
    TechnicData technicData;
    
    // Konstruktor
    public MainWindow() {
        initComponents();
        
        // Tworzymy egzemplarz bazy pacjentów
        patientStorage = new PatientStorage();
        // Zczytujemy zawartość bazy do rozwijanej listy pacjentów
        patientsListComboBox.setModel(new DefaultComboBoxModel(patientStorage.GetPatientsList().toArray()));
        
        // Jeżeli dane technika są zapisane w pliku preferencji programu, to je zczytujemy
        File propFile = new File("res/app.properties");
        if (propFile.isFile() && propFile.canRead())
        {
            Properties properties = new Properties();
            try {
                properties.load(new FileInputStream(propFile));
                technicData = new TechnicData();
                technicData.firstName = properties.getProperty("first_name");
                technicData.surname = properties.getProperty("surname");
                technicData.email = properties.getProperty("email");
                technicData.phoneNumber = properties.getProperty("phone_number");
                technicData.idNumber = Integer.parseInt(properties.getProperty("id_number"));
                // Ustawiamy wartość wyświetlaną w oknie
                technicNameLabel.setText(technicData.toString());
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        examFileChooser = new javax.swing.JFileChooser();
        patientsListComboBox = new javax.swing.JComboBox();
        addPatientButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        examFileField = new javax.swing.JTextField();
        examFileButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        technicNameLabel = new javax.swing.JLabel();
        editTechnicDataButton = new javax.swing.JButton();
        generateButton = new javax.swing.JButton();

        examFileChooser.setCurrentDirectory(new java.io.File("C:\\Program Files\\NetBeans 7.4\\."));
        examFileChooser.setDialogTitle("Wybierz plik z badaniem");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Aplikacja technika");
        setName("mainFrame"); // NOI18N

        addPatientButton.setText("Dodaj pacjenta do bazy");
        addPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Badany pacjent:");

        jLabel2.setText("Wynik badania:");

        examFileField.setText("Proszę wczytać plik badania");
        examFileField.setEnabled(false);

        examFileButton.setText("Wczytaj");
        examFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examFileButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Technik badający:");

        technicNameLabel.setText("-- nie ustalono --");

        editTechnicDataButton.setText("Edytuj dane");
        editTechnicDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTechnicDataButtonActionPerformed(evt);
            }
        });

        generateButton.setText("Generuj");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(patientsListComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(examFileField, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE))
                    .addComponent(technicNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addPatientButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(examFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editTechnicDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(generateButton)
                .addGap(262, 262, 262))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientsListComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPatientButton)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(examFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(examFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(technicNameLabel)
                    .addComponent(editTechnicDataButton))
                .addGap(39, 39, 39)
                .addComponent(generateButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientButtonActionPerformed
        // Wyświetlamy okno wprowadzania nowego pacjenta (jako modalne)
        new NewPatientWindow(this, true).setVisible(true);
    }//GEN-LAST:event_addPatientButtonActionPerformed

    private void examFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examFileButtonActionPerformed
        // Wyświetalmy okno wyboru pliku binarnego badania i zapisujemy wybór użytkownika
        int returnVal = examFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            examFile = examFileChooser.getSelectedFile();
            // Ustawiamy pole w oknie
            examFileField.setText(examFile.getAbsolutePath());
        }
    }//GEN-LAST:event_examFileButtonActionPerformed

    private void editTechnicDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTechnicDataButtonActionPerformed
        // Wyświetlamy okno edycji danych technika (jako modalne)
        new TechnicDetailsWindow(this, true, technicData).setVisible(true);
    }//GEN-LAST:event_editTechnicDataButtonActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        // Przeprowadzamy szereg testów, czy użytkownik wprowadził poprawne dane
        if (patientsListComboBox.getSelectedItem() == null)
        {
            JOptionPane.showMessageDialog(this,
                "Proszę wybrać pacjenta z bazy lub wprowadzić dane nowego.",
                "Błędne dane",
                JOptionPane.ERROR_MESSAGE);
        }
        else if (examFile == null || !examFile.isFile() || !examFile.canRead())
        {
            JOptionPane.showMessageDialog(this,
                "Proszę wybrać poprawny plik badania.",
                "Błędne dane",
                JOptionPane.ERROR_MESSAGE);
        }
        else if (technicData == null)
        {
            JOptionPane.showMessageDialog(this,
                "Proszę wprowadzić dane technika.",
                "Niepełne dane",
                JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            // Tworzymy ontologię badania
            OntModel ontModel =
                    ExamOntologyGenerator.GenerateExamOntology((PatientData)patientsListComboBox.getSelectedItem(),
                            technicData, examFile);
            // I zapisujemy ją do pliku
            try {
                ontModel.write(new FileOutputStream("out/out.owl"));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            JOptionPane.showMessageDialog(this,
                "Zapisano wygenerowaną ontologię.",
                "Wygenerowano",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_generateButtonActionPerformed

    /// Funkcja wywoływana przez okno dodawania nowego pacjenta, by dodać nowego pacjenta.
    public void AddPatient(PatientData newPatient)
    {
        patientStorage.AddPatient(newPatient);
        // Dodaj do listy rozwijanej i zaznacz jako wybrany
        patientsListComboBox.addItem(newPatient);
        patientsListComboBox.setSelectedIndex(patientsListComboBox.getItemCount() - 1);
    }
    
    // Funkcja wywoływana przez okno edycji danych technika, by zapisać zmiany.
    public void UpdateTechnic(TechnicData newTechnicData)
    {
        technicData = newTechnicData;
        // Zapisz dane jako preferencje programu
        Properties properties = new Properties();
        properties.setProperty("first_name", technicData.firstName);
        properties.setProperty("surname", technicData.surname);
        properties.setProperty("email", technicData.email);
        properties.setProperty("phone_number", technicData.phoneNumber);
        properties.setProperty("id_number", Integer.toString(technicData.idNumber));
        try {
            properties.store(new FileOutputStream("res/app.properties"), null);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Ustaw wartość w oknie
        technicNameLabel.setText(technicData.toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPatientButton;
    private javax.swing.JButton editTechnicDataButton;
    private javax.swing.JButton examFileButton;
    private javax.swing.JFileChooser examFileChooser;
    private javax.swing.JTextField examFileField;
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox patientsListComboBox;
    private javax.swing.JLabel technicNameLabel;
    // End of variables declaration//GEN-END:variables
}
